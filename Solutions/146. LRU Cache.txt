----- TC:- O(1), SC:- O(n), where n is max size of cache -----
----- Reference:- https://www.youtube.com/watch?v=z9bJUPxzFOw -----

class LRUCache {
    class MyNode {
        int key, value;
        MyNode next, prev;

        MyNode(int key, int value) {
            this.key = key;
            this.value = value;
            this.next = this.prev = null;
        }
    }

    int capacity;
    MyNode head, tail;
    HashMap<Integer, MyNode> map;

    public LRUCache(int capacity) {
        this.capacity = capacity;
        head = new MyNode(0, 0);
        tail = new MyNode(0, 0);
        head.next = tail;
        tail.prev = head;
        map = new HashMap<>();
    }

    private void deleteNode(MyNode node) {
        node.prev.next = node.next;
        node.next.prev = node.prev;
    }

    private void addNode(MyNode newNode) {
        newNode.next = head.next;
        newNode.prev = head;
        head.next.prev = newNode;
        head.next = newNode;
    }

    public int get(int key) {
        if (map.containsKey(key)) {
            deleteNode(map.get(key));
            addNode(map.get(key));
            return map.get(key).value;
        }
        return -1;
    }

    public void put(int key, int value) {
        MyNode newNode;
        if (map.containsKey(key)) {
            newNode = map.get(key);
            newNode.value = value;
            deleteNode(map.get(key));
        } else {
            newNode = new MyNode(key, value);
            if (map.size() == capacity) {
                MyNode temp = tail.prev;
                deleteNode(temp);
                map.remove(temp.key);
            }
            map.put(key, newNode);
        }
        addNode(newNode);
    }
}
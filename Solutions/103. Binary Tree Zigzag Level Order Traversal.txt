---------------- My solution (Recursive:- TC:- O(n^2), SC:- O(h) where h = height of tree) ----------------
class Solution {
    private void ltor(TreeNode root, int curr, int height, List list) {
        if (root == null) {
            return;
        }
        if (curr == height) {
            list.add(root.val);
            return;
        }
        ltor(root.left, curr + 1, height, list);
        ltor(root.right, curr + 1, height, list);
    }

    private void rtol(TreeNode root, int curr, int height, List list) {
        if (root == null) {
            return;
        }
        if (curr == height) {
            list.add(root.val);
            return;
        }
        rtol(root.right, curr + 1, height, list);
        rtol(root.left, curr + 1, height, list);
    }

    private int getHeight(TreeNode root) {
        if (root == null) {
            return 0;
        }
        return (Math.max(getHeight(root.left), getHeight(root.right))) + 1;
    }

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        int height = getHeight(root);
        for (int i = 1; i <= height; i++) {
            List<Integer> list = new ArrayList<>();
            if (i % 2 == 0) {
                rtol(root, 1, i, list);
            } else {
                ltor(root, 1, i, list);
            }
            ans.add(list);
        }
        return ans;
    }
}
---------- (Iterative:- TC:- O(n) where n = number of nodes, SC:- O(2^h) where h = height of tree) ----------
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        if (root == null) {
            return ans;
        }
        Deque<TreeNode> q = new ArrayDeque<>();
        q.offer(root);
        int lvl = 1;
        while (!q.isEmpty()) {
            List<Integer> list = new ArrayList<>();
            int size = q.size();
            for (int i = 0; i < size; i++) {
                TreeNode temp = q.poll();
                list.add(temp.val);
                if (temp.left != null) {
                    q.offer(temp.left);
                }
                if (temp.right != null) {
                    q.offer(temp.right);
                }
            }
            if (lvl % 2 == 0) {
                Collections.reverse(list);
            }
            ans.add(list);
            lvl++;
        }
        return ans;
    }
}
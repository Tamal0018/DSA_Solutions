----- Recursive, TC:- O(2^(m*n)) & SC:- O(m+n) for stack space -----

class Solution {
    private int helper(int row, int col, int[][] grid) {
        if (row == grid.length || col == grid[row].length || grid[row][col] == 1) {
            return 0;
        }
        if (row == grid.length - 1 && col == grid[row].length - 1) {
            return 1;
        }
        return helper(row + 1, col, grid) + helper(row, col + 1, grid);
    }

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        return helper(0, 0, obstacleGrid);
    }
}

----- Recursive using dp, TC:- O(m*n) & SC:- O((n-1)+(m-1)) + O(m*n) for stack space and dp array -----

class Solution {
    private int helper(int row, int col, int[][] grid, int[][] dp) {
        if (row == grid.length || col == grid[row].length || grid[row][col] == 1) {
            return 0;
        }
        if (dp[row][col] != 0) {
            return dp[row][col];
        }
        if (row == grid.length - 1 && col == grid[row].length - 1) {
            return dp[row][col] = 1;
        }
        return dp[row][col] = helper(row + 1, col, grid, dp) + helper(row, col + 1, grid, dp);
    }

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int[][] dp = new int[obstacleGrid.length][obstacleGrid[0].length];
        return helper(0, 0, obstacleGrid, dp);
    }
}

----- Tabulation, TC:- O(m*n) & SC:- O(m*n) for dp array -----

class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int[][] dp = new int[obstacleGrid.length][obstacleGrid[0].length];
        for (int i = 0; i < obstacleGrid.length; i++) {
            for (int j = 0; j < obstacleGrid[i].length; j++) {
                if (obstacleGrid[i][j] == 1) {
                    dp[i][j] = 0;
                    continue;
                }
                if (i == 0 && j == 0) {
                    dp[i][j] = 1;
                    continue;
                }
                int temp = 0;
                temp += (i > 0) ? dp[i - 1][j] : 0;
                temp += (j > 0) ? dp[i][j - 1] : 0;
                dp[i][j] = temp;
            }
        }
        return dp[obstacleGrid.length - 1][obstacleGrid[0].length - 1];
    }
}

----- Space optimization, TC:- O(m*n) & SC:- O(n) -----

class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int[] prev = new int[obstacleGrid[0].length];
        for (int i = 0; i < obstacleGrid.length; i++) {
            int[] curr = new int[obstacleGrid[0].length];
            for (int j = 0; j < obstacleGrid[i].length; j++) {
                if (obstacleGrid[i][j] == 1) {
                    curr[j] = 0;
                    continue;
                }
                if (i == 0 && j == 0) {
                    curr[j] = 1;
                    continue;
                }
                int temp = 0;
                temp += (i > 0) ? prev[j] : 0;
                temp += (j > 0) ? curr[j - 1] : 0;
                curr[j] = temp;
            }
            prev = curr;
        }
        return prev[prev.length - 1];
    }
}
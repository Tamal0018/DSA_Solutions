------ Reference for brute force, better and optimal:- https://takeuforward.org/data-structure/median-of-two-sorted-arrays-of-different-sizes/ ------
------ TC:- O(log(min(m,n))), SC:- O(1) ------

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        // Ensure that nums1 is the smaller array. This simplifies the binary search 
        // because we want to minimize the number of elements in the array where we do the search.
        if (nums1.length > nums2.length) {
            return findMedianSortedArrays(nums2, nums1); // Swap the arrays if nums1 is larger
        }

        // Set up binary search bounds on the smaller array (nums1).
        int low = 0, high = nums1.length;

        // Calculate the position for the median split.
        // This is the position at which the left partition of both arrays will contain half the total elements.
        int median = (nums1.length + nums2.length + 1) / 2;
		//Adding +1 to median and mid as it satisfies both even and odd number of elements.

        // Perform binary search on nums1.
        while (low <= high) {
            // mid is the partition position in nums1.
            int mid = (low + high + 1) / 2;

            // l1 is the left-side element in nums1 partition, or MIN_VALUE if no elements left on the left side.
            int l1 = (mid > 0) ? nums1[mid - 1] : Integer.MIN_VALUE;

            // l2 is the left-side element in nums2 partition, or MIN_VALUE if no elements left on the left side.
            int l2 = (median - mid > 0) ? nums2[median - mid - 1] : Integer.MIN_VALUE;

            // r1 is the right-side element in nums1 partition, or MAX_VALUE if no elements left on the right side.
            int r1 = (mid < nums1.length) ? nums1[mid] : Integer.MAX_VALUE;

            // r2 is the right-side element in nums2 partition, or MAX_VALUE if no elements left on the right side.
            int r2 = (median - mid < nums2.length) ? nums2[median - mid] : Integer.MAX_VALUE;

            // If l1 > r2, this means the partition in nums1 is too far to the right.
            // We need to move it left, so reduce the high bound.
            if (l1 > r2) {
                high = mid - 1;

            // If l2 > r1, this means the partition in nums1 is too far to the left.
            // We need to move it right, so increase the low bound.
            } else if (l2 > r1) {
                low = mid + 1;

            // If neither of the above conditions are true, we have found the correct partition.
            // Now we calculate the median based on the total number of elements.
            } else {
                // If the combined length of nums1 and nums2 is odd, the median is the max of the left-side elements.
                if ((nums1.length + nums2.length) % 2 == 1) {
                    return (double) Math.max(l1, l2);
                } else {
                    // If the combined length is even, the median is the average of the max left element 
                    // and the min right element from the partitions.
                    return (Math.max(l1, l2) + Math.min(r1, r2)) / 2.0;
                }
            }
        }

        // In case of invalid inputs, though theoretically unreachable, return 0.0 as a default.
        return 0.0;
    }
}

Reference:- https://takeuforward.org/data-structure/sort-an-array-of-0s-1s-and-2s/

------- Two pass approach, TC:- O(n+n) ~ O(n), SC:- O(1) -------

class Solution {
    public void sortColors(int[] nums) {
        int zero = 0, one = 0;
        for(int i: nums){
            if(i == 0){
                zero++;
            }else if(i == 1){
                one++;
            }
        }
        int i = 0;
        while(zero != 0){
            nums[i] = 0;
            i++;
            zero--;
        }
        while(one != 0){
            nums[i] = 1;
            i++;
            one--;
        }
        while(i < nums.length){
            nums[i] = 2;
            i++;
        }
    }
}

------- One pass approach using "Dutch National flag algorithm", TC:- O(n), SC:- O(1) -------

class Solution {
    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    public void sortColors(int[] nums) {
        int low = 0, mid = 0, high = nums.length - 1;
        while (mid <= high) {
            if (nums[mid] == 0) {
                swap(nums, low, mid);
                low++;
                mid++;
            } else if (nums[mid] == 2) {
                swap(nums, mid, high);
                high--;
            } else {
                mid++;
            }
        }
    }
}
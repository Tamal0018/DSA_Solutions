----- TC:- O((2^n)*k*(n/2)) where k is for inserting the palindromes in another data structure, SC:- O(k*x) where k = avg. length of list of palindromes and x = total list of palindromes in final ans -----

class Solution {
    private boolean checkPal(String s, int start, int end) {
        while (start < end) {
            if (s.charAt(start) != s.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }

    private void helper(String s, int start, List list, List ans) {
        if (start == s.length()) {
            ans.add(new ArrayList<>(list));
            return;
        }
        for (int i = start; i < s.length(); i++) {
            if (checkPal(s, start, i)) {
                list.add(s.substring(start, i + 1));
                helper(s, i + 1, list, ans);
                list.remove(list.size() - 1);
            }
        }
    }

    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<>();
        List<String> list = new ArrayList<>();
        helper(s, 0, list, ans);
        return ans;
    }
}
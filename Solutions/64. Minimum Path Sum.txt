----- Recursive, TC:- O(2^(m*n)) & SC:- O(m+n) for stack space -----

class Solution {
    private int helper(int row, int col, int[][] grid) {
        if (row == grid.length - 1 && col == grid[row].length - 1) {
            return grid[row][col];
        }
        int temp1 = (row < grid.length - 1) ? helper(row + 1, col, grid) : Integer.MAX_VALUE;
        int temp2 = (col < grid[0].length - 1) ? helper(row, col + 1, grid) : Integer.MAX_VALUE;
        return Math.min(temp1, temp2) + grid[row][col];
    }

    public int minPathSum(int[][] grid) {
        return helper(0, 0, grid);
    }
}

----- Recursive using dp, TC:- O(m*n) & SC:- O((n-1)+(m-1)) + O(m*n) for stack space and dp array -----

class Solution {
    private int helper(int row, int col, int[][] grid, int[][] dp) {
        if (row == grid.length - 1 && col == grid[row].length - 1) {
            return dp[row][col] = grid[row][col];
        }
        if (dp[row][col] != 0) {
            return dp[row][col];
        }
        int temp1 = (row < grid.length - 1) ? helper(row + 1, col, grid, dp) : Integer.MAX_VALUE;
        int temp2 = (col < grid[0].length - 1) ? helper(row, col + 1, grid, dp) : Integer.MAX_VALUE;
        return dp[row][col] = Math.min(temp1, temp2) + grid[row][col];
    }

    public int minPathSum(int[][] grid) {
        int[][] dp = new int[grid.length][grid[0].length];
        return helper(0, 0, grid, dp);
    }
}

----- Tabulation, TC:- O(m*n) & SC:- O(m*n) for dp array -----

class Solution {
    public int minPathSum(int[][] grid) {
        int[][] dp = new int[grid.length][grid[0].length];
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[i].length; j++) {
                if (i == 0 && j == 0) {
                    dp[i][j] = grid[i][j];
                    continue;
                }
                int temp1 = (i == 0) ? Integer.MAX_VALUE : dp[i - 1][j];
                int temp2 = (j == 0) ? Integer.MAX_VALUE : dp[i][j - 1];
                dp[i][j] = Math.min(temp1, temp2) + grid[i][j];
            }
        }
        return dp[grid.length - 1][grid[0].length - 1];
    }
}

----- Space optimization, TC:- O(m*n) & SC:- O(n) where m = grid.length and n = grid[0].length -----

class Solution {
    public int minPathSum(int[][] grid) {
        int[] prev = new int[grid[0].length];
        for (int i = 0; i < grid.length; i++) {
            int[] curr = new int[grid[0].length];
            for (int j = 0; j < grid[i].length; j++) {
                if (i == 0 && j == 0) {
                    curr[j] = grid[i][j];
                    continue;
                }
                int temp1 = (i == 0) ? Integer.MAX_VALUE : prev[j];
                int temp2 = (j == 0) ? Integer.MAX_VALUE : curr[j - 1];
                curr[j] = Math.min(temp1, temp2) + grid[i][j];
            }
            prev = curr;
        }
        return prev[grid[0].length - 1];
    }
}
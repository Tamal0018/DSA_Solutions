----- Modified Binary Search -----
class Solution {
    private int findFirst(int[] nums, int tgt){
        int index = -1, start = 0, end = nums.length - 1;
        while(start <= end){
            int mid = (start + end) / 2;
            if(nums[mid] >= tgt){
                end = mid - 1;
            }else {
                start = mid + 1;
            }
            if(nums[mid] == tgt){
                index = mid;
            }
        }
        return index;
    }
    private int findLast(int[] nums, int tgt){
        int index = -1, start = 0, end = nums.length - 1;
        while(start <= end){
            int mid = (start + end) / 2;
            if(nums[mid] <= tgt){
                start = mid + 1;
            }else {
                end = mid - 1;
            }if(nums[mid] == tgt){
                index = mid;
            }
        }
        return index;
    }
    public int[] searchRange(int[] nums, int tgt) {
        int[] res = new int[2];
        res[0] = findFirst(nums, tgt);
        res[1] = findLast(nums, tgt);
        return res;
    }
}

----- Using upper bound and lower bound, TC:- O(2*logn), SC:- O(1) where n = length of nums array -----

class Solution {
    private int findFirst(int[] nums, int target) {
        int n = nums.length - 1, low = 0, high = n, ans = -1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (nums[mid] == target) {
                ans = mid;
                high = mid - 1;
            } else if (nums[mid] > target) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }

    private int findLast(int[] nums, int target) {
        int n = nums.length - 1, low = 0, high = n, ans = -1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (nums[mid] == target) {
                ans = mid;
                low = mid + 1;
            } else if (nums[mid] > target) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }

    public int[] searchRange(int[] nums, int target) {
        int[] ans = new int[2];
        ans[0] = findFirst(nums, target);
        ans[1] = findLast(nums, target);
        return ans;
    }
}
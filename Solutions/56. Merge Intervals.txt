----- TC:- O(n*logn for sorting + n for traversing array) ~ O(n*logn), SC:- O(n) for answer array/list -----

class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals, (a, b) -> {
            if (a[0] != b[0]) {
                return a[0] - b[0];
            }
            return a[1] - b[1];
        });
        List<int[]> list = new ArrayList<>();
        int[] curIntvl = new int[]{intervals[0][0], intervals[0][1]};
        for (int i = 1; i < intervals.length; i++) {
            if (curIntvl[1] >= intervals[i][0]) {
                curIntvl[1] = Math.max(curIntvl[1], intervals[i][1]);
            } else {
                list.add(curIntvl);
                curIntvl = new int[]{intervals[i][0], intervals[i][1]};
            }
        }
        list.add(curIntvl);
        int[][] result = new int[list.size()][2];
        for (int i = 0; i < list.size(); i++) {
            result[i] = list.get(i);
        }
        return result;
    }
}
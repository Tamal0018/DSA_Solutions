Reference:- https://takeuforward.org/data-structure/search-in-a-sorted-2d-matrix/ [In this reference, TC is O(log(m*n) which is equivalent to my 2nd solution i.e. O(log(m)+log(n))]
----- My solution, TC:- O(m+n), SC:- O(1) -----

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if (target < matrix[0][0] || target > matrix[matrix.length - 1][matrix[0].length - 1]) {
            return false;
        }
        int i = 0;
        while (i < matrix.length && target > matrix[i][0]) {
            i++;
        }
        if (i < matrix.length && matrix[i][0] == target) {
            return true;
        }
        for (int j = 0; j < matrix[0].length; j++) {
            if (matrix[i - 1][j] == target) {
                return true;
            }
        }
        return false;
    }
}

----- TC:- O(log(m)+log(n)) = O(log(m*n)), SC:- O(1) -----

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int low = 0, high = matrix.length - 1, mid = 0;
        while (low <= high) {  //Using binary search in row level to find the row to search
            mid = (low + high) / 2;
            if (matrix[mid][0] == target) {
                return true;
            } else if (matrix[mid][0] > target) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        mid = (high + low) / 2;
        low = 0;
        high = matrix[mid].length - 1;
        while (low <= high) {  //Using binary search in column level to find the element in the column
            int midd = (low + high) / 2;
            if (matrix[mid][midd] == target) {
                return true;
            } else if (matrix[mid][midd] > target) {
                high = midd - 1;
            } else {
                low = midd + 1;
            }
        }
        return false;
    }
}

----- TC:- O(log(m*n)), SC:- O(1) -----

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int low = 0, high = (matrix.length * matrix[0].length) - 1;
        while (low <= high) {
            int mid = low + ((high - low) / 2);
            int row = mid / matrix[0].length, col = mid % matrix[0].length;
            if (matrix[row][col] == target) {
                return true;
            }
            if (matrix[row][col] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return false;
    }
}
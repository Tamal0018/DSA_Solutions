----- My solution, TC:- O(m*n*4^k), SC:- O(k) where k = word.length() -----
class Solution {
    private boolean check(char[][] board, String word, int idx, String ans, int i, int j) {
        if (word.equals(ans)) {
            return true;
        }
        if (i == board.length || i < 0 || j == board[0].length || j < 0 || board[i][j] != word.charAt(idx)) {
            return false;
        }
        boolean temp1 = false, temp2 = false, temp3 = false, temp4 = false;
        if (board[i][j] == word.charAt(idx)) {
            ans = ans + board[i][j];
            board[i][j] = '-';
            temp1 = check(board, word, idx + 1, ans, i + 1, j);
            temp2 = check(board, word, idx + 1, ans, i - 1, j);
            temp3 = check(board, word, idx + 1, ans, i, j + 1);
            temp4 = check(board, word, idx + 1, ans, i, j - 1);
        }
        boolean temp = (temp1 || temp2 || temp3 || temp4);
        if (!temp) {
            board[i][j] = word.charAt(idx);
        }
        return temp;
    }

    public boolean exist(char[][] board, String word) {
        boolean ans = false;
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                ans = check(board, word, 0, "", i, j);
                if (ans) {
                    return true;
                }
            }
        }
        return ans;
    }
}

----- My solution, TC:- O(m*n*4^k), SC:- O(k) where k = word.length() -----

class Solution {
    private boolean helper(char[][] board, String word, int row, int col, int idx) {
        if (idx == word.length()) {
            return true;
        }
        if (row >= board.length || row < 0 || col >= board[0].length || col < 0) {
            return false;
        }
        boolean found = false;
        if (board[row][col] == word.charAt(idx)) {
            char ch = board[row][col];
            board[row][col] = '.';
            for (int i = -1; i < 2; i++) {
                for (int j = -1; j < 2; j++) {
                    if ((i == 0 || j == 0) && (i != j)) {
                        found = helper(board, word, row + i, col + j, idx + 1);
                    }
                    if (found) {
                        return true;
                    }
                }
            }
            board[row][col] = ch;
        }
        return found;
    }

    public boolean exist(char[][] board, String word) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] == word.charAt(0)) {
                    if (helper(board, word, i, j, 0)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
}
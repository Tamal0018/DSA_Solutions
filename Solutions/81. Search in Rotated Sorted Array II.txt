----- TC:- Best and avg case O(logn) and worst case O(n), SC:- O(logn) -----

class Solution {
    private int findPivot(int[] nums, int low, int high) {
        while (low <= high) {
            int mid = (low + high) / 2;
            if (mid > 0 && nums[mid] < nums[mid - 1]) {
                return mid;
            } else if (nums[mid] == nums[0]) {
                int ans = findPivot(nums, low, mid - 1);
                if (ans != -1) {
                    return ans;
                }
                return findPivot(nums, mid + 1, high);
            } else if (nums[mid] > nums[0]) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return -1;
    }

    private boolean binarySearch(int[] nums, int low, int high, int target) {
        while (low <= high) {
            int mid = (low + high) / 2;
            if (nums[mid] == target) {
                return true;
            } else if (nums[mid] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return false;
    }

    public boolean search(int[] nums, int target) {
        int pivot = findPivot(nums, 0, nums.length - 1);
        boolean ans = false;
        if (pivot == -1) {
            ans = binarySearch(nums, 0, nums.length - 1, target);
        } else {
            if (target > nums[nums.length - 1]) {
                ans = binarySearch(nums, 0, pivot - 1, target);
            } else {
                ans = binarySearch(nums, pivot, nums.length - 1, target);
            }
        }
        return ans;
    }
}

----- TC:- Best and avg case O(logn) and worst case O(n), SC:- O(1) [Striver: https://www.youtube.com/watch?v=w2G2W8l__pc] -----

class Solution {
    public boolean search(int[] nums, int target) {
        int low = 0, high = nums.length - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (nums[mid] == target) {
                return true;
            }
            if (nums[mid] == nums[low] && nums[mid] == nums[high]) {
                low++;
                high--;
            } else if (nums[mid] <= nums[high]) {
                if (target > nums[mid] && target <= nums[high]) {
                    low = mid + 1;
                } else {
                    high = mid - 1;
                }
            } else {
                if (target < nums[mid] && target >= nums[low]) {
                    high = mid - 1;
                } else {
                    low = mid + 1;
                }
            }
        }
        return false;
    }
}
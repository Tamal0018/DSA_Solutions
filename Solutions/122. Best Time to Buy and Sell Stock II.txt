----- Recursive, TC:- O(2^n) & SC:- O(n) for stack space -----
class Solution {
    private int helper(int idx, int[] prices, int curr, boolean stock) {
        if (idx < 0) {
            return 0;
        }
        if (stock) {
            int notSell = helper(idx - 1, prices, curr, stock);
            int sell = 0;
            if (prices[idx] < curr) {
                sell = helper(idx - 1, prices, 0, false) + curr - prices[idx];
            }
            return Math.max(notSell, sell);
        } else {
            int notBuy = helper(idx - 1, prices, curr, stock);
            int buy = helper(idx - 1, prices, prices[idx], true);
            return Math.max(notBuy, buy);
        }
    }

    public int maxProfit(int[] prices) {
        return helper(prices.length - 1, prices, 0, false);
    }
}

----- Recursive using dp, TC:- O(2n) ~ O(n) & SC:- O(n) + O(2n) for stack space and dp array -----
Comment:- Could not implement this dp code from n - 1 to 0, instead dp solution recursion is from 0 to n

class Solution {
    private int helper(int idx, int[] prices, boolean holding, int[][] dp) {
        if (idx >= prices.length) {
            return 0;
        }

        if (dp[idx][holding ? 1 : 0] != -1) {
            return dp[idx][holding ? 1 : 0];
        }

        if (holding) {
            // Option 1: Sell the stock
            int sell = prices[idx] + helper(idx + 1, prices, false, dp);
            // Option 2: Hold the stock
            int hold = helper(idx + 1, prices, true, dp);
            dp[idx][1] = Math.max(sell, hold);
        } else {
            // Option 1: Buy the stock
            int buy = -prices[idx] + helper(idx + 1, prices, true, dp);
            // Option 2: Don't buy the stock
            int skip = helper(idx + 1, prices, false, dp);
            dp[idx][0] = Math.max(buy, skip);
        }

        return dp[idx][holding ? 1 : 0];
    }

    public int maxProfit(int[] prices) {
        int n = prices.length;
        int[][] dp = new int[n][2];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], -1);
        }
        return helper(0, prices, false, dp);
    }

}

----- Tabulation, TC:- O(2n) ~ O(n) & SC:- O(2n) for dp array -----

class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int[][] dp = new int[n + 1][2];
        for (int i = n - 1; i >= 0; i--) {
            for (int j = 0; j < 2; j++) {
                int profit = 0;
                if (j == 1) {
                    int sell = prices[i] + dp[i + 1][0];
                    int hold = dp[i + 1][j];
                    dp[i][j] = Math.max(sell, hold);
                } else {
                    int buy = -prices[i] + dp[i + 1][1];
                    int skip = dp[i + 1][j];
                    dp[i][j] = Math.max(buy, skip);
                }
            }
        }
        return dp[0][0];
    }

}

----- Space optimization, TC:- O(2n) ~ O(n) & SC:- O(1) -----

class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int[] ahead = new int[2];
        for (int i = n - 1; i >= 0; i--) {
            int[] curr = new int[2];
            for (int j = 0; j < 2; j++) {
                int profit = 0;
                if (j == 1) {
                    int sell = prices[i] + ahead[0];
                    int hold = ahead[j];
                    curr[j] = Math.max(sell, hold);
                } else {
                    int buy = -prices[i] + ahead[1];
                    int skip = ahead[j];
                    curr[j] = Math.max(buy, skip);
                }
            }
            ahead = curr;
        }
        return ahead[0];
    }

}

----- Another simplified solution -----

class Solution {
    public int maxProfit(int[] prices) {
        int profit = 0;
        for(int i = 1; i < prices.length; i++){
            if(prices[i] > prices[i - 1]){
                profit += (prices[i] - prices[i - 1]);
            }
        }
        return profit;
    }
}
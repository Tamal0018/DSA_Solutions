------- My solution TC:- O(n ^ 2) for searching findIdx(), SC:- O(1) excluding stack, O(h) including stack -------
-------- Reference:- https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/solution/  &  https://www.youtube.com/watch?v=PoBGyrIWisE --------

class Solution {
    int index;

    private int findIdx(int[] arr, int target, int l, int r) {
        for (int i = l; i <= r; i++) {
            if (arr[i] == target) {
                return i;
            }
        }
        return -1;
    }

    private TreeNode builder(int[] preorder, int[] inorder, int l, int r) {
        if (l > r) {
            return null;
        }
        index++;
        int i = findIdx(inorder, preorder[index], l, r);
        TreeNode root = new TreeNode(preorder[index]);
        root.left = builder(preorder, inorder, l, i - 1);
        root.right = builder(preorder, inorder, i + 1, r);
        return root;
    }

    public TreeNode buildTree(int[] preorder, int[] inorder) {
        TreeNode head;
        index = -1;
        head = builder(preorder, inorder, 0, inorder.length - 1);
        return head;
    }
}

------- My solution TC:- O(n), SC:- O(n) for hashmap -------

class Solution {
    int index;

    private TreeNode builder(int[] preorder, int[] inorder, HashMap map, int l, int r) {
        if (l > r) {
            return null;
        }
        index++;
        int i = (int) map.get(preorder[index]);
        TreeNode root = new TreeNode(preorder[index]);
        root.left = builder(preorder, inorder, map, l, i - 1);
        root.right = builder(preorder, inorder, map, i + 1, r);
        return root;
    }

    public TreeNode buildTree(int[] preorder, int[] inorder) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < inorder.length; i++) {
            map.put(inorder[i], i);
        }
        TreeNode head;
        index = -1;
        head = builder(preorder, inorder, map, 0, inorder.length - 1);
        return head;
    }
}
Note:-
Striver solution has used base case as 
if (j < 0)
    return 1; // We have matched all characters of t
if (i < 0)
    return 0; // We have exhausted all characters of s, but still have characters left in t > 0
This can be a better approach of the base case.

----- Recursive, TC:- O(2^n) & SC:- O(n) for stack space where n = s.length -----

class Solution {
    private int helper(String s, String t, int i, int j) {
        if (j < 0 || (j == 0 && i == 0 && s.charAt(i) == t.charAt(j))) { //Second base case for cases if j == 0 but i != 0, then we cannot return as have other characters to compare with
            return 1;
        }
        int match = 0;
        int notMatch = 0;
        if (i - 1 >= 0) {
            if (s.charAt(i) == t.charAt(j)) {
                match = helper(s, t, i - 1, j - 1);
            }
            notMatch = helper(s, t, i - 1, j);
        }
        return match + notMatch;
    }

    public int numDistinct(String s, String t) {
        return helper(s, t, s.length() - 1, t.length() - 1);
    }
}

----- Recursive using dp, TC:- O(m*n) & SC:- O(n) + O(m*n) for stack space and dp array -----

class Solution {
    private int helper(String s, String t, int i, int j, int[][] dp) {
        if (j < 0 || (j == 0 && i == 0 && s.charAt(i) == t.charAt(j))) {
            return 1;
        }
        if (dp[i][j] != -1) {
            return dp[i][j];
        }
        int match = 0;
        int notMatch = 0;
        if (i - 1 >= 0) {
            if (s.charAt(i) == t.charAt(j)) {
                match = helper(s, t, i - 1, j - 1, dp);
            }
            notMatch = helper(s, t, i - 1, j, dp);
        }
        return dp[i][j] = match + notMatch;
    }

    public int numDistinct(String s, String t) {
        int[][] dp = new int[s.length()][t.length()];
        for (int[] a : dp) {
            Arrays.fill(a, -1);
        }
        return helper(s, t, s.length() - 1, t.length() - 1, dp);
    }
}

----- Tabulation, TC:- O(m*n) & SC:- O(m*n) for dp array -----

class Solution {
    public int numDistinct(String s, String t) {
        int[][] dp = new int[s.length()][t.length() + 1];
        if (s.charAt(0) == t.charAt(0)) { //Base case (j == 0 && i == 0 && s.charAt(i) == t.charAt(j))
            dp[0][1] = 1;
        }
        for (int i = 0; i < s.length(); i++) { //Base case j < 0
            dp[i][0] = 1;
        }
        for (int i = 1; i < s.length(); i++) { //We can start from 1 as we have taken care of i == 0 in base case
            for (int j = 1; j <= t.length(); j++) {
                int match = 0;
                int notMatch = 0;
                if (s.charAt(i) == t.charAt(j - 1)) {
                    match = dp[i - 1][j - 1];
                }
                notMatch = dp[i - 1][j];
                dp[i][j] = match + notMatch;
            }
        }
        return dp[s.length() - 1][t.length()];
    }
}

----- Space optimization, TC:- O(m*n) & SC:- O(n) where n = t.length -----

class Solution {
    public int numDistinct(String s, String t) {
        int[] prev = new int[t.length() + 1];
        prev[0] = 1;
        if (s.charAt(0) == t.charAt(0)) {
            prev[1] = 1;
        }
        for (int i = 1; i < s.length(); i++) {
            int[] curr = new int[t.length() + 1];
            curr[0] = 1;
            for (int j = 1; j <= t.length(); j++) {
                int match = 0;
                int notMatch = 0;
                if (s.charAt(i) == t.charAt(j - 1)) {
                    match = prev[j - 1];
                }
                notMatch = prev[j];
                curr[j] = match + notMatch;
            }
            prev = curr;
        }
        return prev[t.length()];
    }
}

----- Space optimization with single 1D array, TC:- O(m*n) & SC:- O(n) where n = t.length -----

class Solution {
    public int numDistinct(String s, String t) {
        int[] dp = new int[t.length() + 1];
        dp[0] = 1;
        if (s.charAt(0) == t.charAt(0)) {
            dp[1] = 1;
        }
        for (int i = 1; i < s.length(); i++) {
            for (int j = t.length(); j >= 1; j--) {
                int match = 0;
                int notMatch = 0;
                if (s.charAt(i) == t.charAt(j - 1)) {
                    match = dp[j - 1];
                }
                notMatch = dp[j];
                dp[j] = match + notMatch;
            }
        }
        return dp[t.length()];
    }
}
------ TC:- O(n*(2*n)) twice traversing the String for every element ~ O(n^2), SC:- O(1) ------

class Solution {
    public String longestPalindrome(String s) {
        int[] max = new int[2];
        for (int i = 0; i < s.length(); i++) {
            int start = i, end = i;
            //palindrome can be expanded from its center
            while (start >= 0 && end < s.length() && (s.charAt(start) == s.charAt(end))) {
                if ((end - start) > max[1] - max[0]) {
                    max[0] = start;
                    max[1] = end;
                }
                start--;
                end++;
            }
        }
        for (int i = 0; i < s.length() - 1; i++) {
            int start = i, end = i + 1;
            //The reason is the center of a palindrome can be in between two letters.
            //Such palindromes have even number of letters (such as "abba") 
            //and its center are between the two 'b's.
            while (start >= 0 && end < s.length() && (s.charAt(start) == s.charAt(end))) {
                if ((end - start) > max[1] - max[0]) {
                    max[0] = start;
                    max[1] = end;
                }
                start--;
                end++;
            }
        }
        return s.substring(max[0], max[1] + 1);
    }
}

------ TC:- O(n*(2*n)) twice traversing the String for every element ~ O(n^2), SC:- O(1) ------

class Solution {
    private void getMax(String s, int i, int[] max) {
        int left = i, right = i;
        while (left >= 0 && right <= s.length() - 1 && (s.charAt(left) == s.charAt(right))) {
            left--;
            right++;
        }
        if ((right - left - 1) > max[1] - max[0]) {
            max[0] = left + 1;
            max[1] = right;
        }
        left = i;
        right = i + 1;
        while (left >= 0 && right <= s.length() - 1 && (s.charAt(left) == s.charAt(right))) {
            left--;
            right++;
        }
        if ((right - left - 1) > max[1] - max[0]) {
            max[0] = left + 1;
            max[1] = right;
        }
    }

    public String longestPalindrome(String s) {
        int[] max = new int[]{0, 1};
        for (int i = 0; i < s.length() - 1; i++) {
            getMax(s, i, max);
        }
        return s.substring(max[0], max[1]);
    }
}
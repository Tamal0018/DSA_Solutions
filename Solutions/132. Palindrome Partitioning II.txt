----- Recursive, TC:- O(k^n) & SC:- O(n) for stack space -----

class Solution {
    private boolean checkPal(String s, int start, int end) {
        while (start < end) {
            if (s.charAt(start) != s.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }

    private int helper(String s, int idx) {
        if (idx == 0) {
            return 1;
        }
        int min = Integer.MAX_VALUE;
        for (int k = idx; k >= 0; k--) {
            int count = Integer.MAX_VALUE;
            if (checkPal(s, k, idx)) {
                count = 1 + ((k == 0) ? 0 : helper(s, k - 1));
            }
            min = Math.min(min, count);
        }
        return min;
    }

    public int minCut(String s) {
        return helper(s, s.length() - 1) - 1;
    }
}

----- Recursive using dp, TC:- O(k*n) & SC:- O(n) + O(n) for stack space and dp array -----

class Solution {
    private boolean checkPal(String s, int start, int end) {
        while (start < end) {
            if (s.charAt(start) != s.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }

    private int helper(String s, int idx, int[] dp) {
        if (idx == 0) {
            return 1;
        }
        if (dp[idx] != -1) {
            return dp[idx];
        }
        int min = Integer.MAX_VALUE;
        for (int k = idx; k >= 0; k--) {
            int count = Integer.MAX_VALUE;
            if (checkPal(s, k, idx)) {
                count = 1 + ((k == 0) ? 0 : helper(s, k - 1, dp));
            }
            min = Math.min(min, count);
        }
        return dp[idx] = min;
    }

    public int minCut(String s) {
        int[] dp = new int[s.length()];
        Arrays.fill(dp, -1);
        return helper(s, s.length() - 1, dp) - 1;
    }
}

----- Tabulation, TC:- O(k*n) & SC:- O(n) for dp array -----

class Solution {
    private boolean checkPal(String s, int start, int end) {
        while (start < end) {
            if (s.charAt(start) != s.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }

    public int minCut(String s) {
        int[] dp = new int[s.length()];
        dp[0] = 1;
        for (int i = 1; i < s.length(); i++) {
            int min = Integer.MAX_VALUE;
            for (int k = i; k >= 0; k--) {
                int count = Integer.MAX_VALUE;
                if (checkPal(s, k, i)) {
                    count = 1 + ((k == 0) ? 0 : dp[k - 1]);
                }
                min = Math.min(min, count);
            }
            dp[i] = min;
        }
        return dp[s.length() - 1] - 1;
    }
}


----- Below code has been taken from LeetCode solutions and is very efficient. Use ChatGPT for explanation -----

class Solution {
    public int minCut(String s) {
        int n = s.length();
        char[] seq = s.toCharArray();
        int[] dp = new int[n + 1];
        for (int i = 0; i <= n; i++)
            dp[i] = i - 1;
        
        for (int i = 1; i <= n; i++) {
            int lo = i - 1;
            int prev = dp[i - 1];
            dp[i] = Math.min(dp[i], prev + 1);
            while(i < n && seq[i - 1] == seq[i]) {
                i++;
                prev = Math.min(dp[i - 1], prev);
                dp[i] = Math.min(dp[i], prev + 1);
            }

            int hi = i + 1;
            while(lo > 0 && hi <= n && seq[lo - 1] == seq[hi - 1]) {
                dp[hi] = Math.min(dp[hi], dp[lo - 1] + 1);
                lo--;
                hi++;
            }
        }

        return dp[n];
    }
}
----- My approach, ran successfully but not recommended -----

class Solution {
    private boolean helper(String s, String p, int i, int j) {
        if (i < 0 && j < 0) {
            return true;
        }
        if ((i >= 0 && j < 0)) {
            return false;
        }
        boolean match = false;
        if (i >= 0 && s.charAt(i) == p.charAt(j)) {
            match = helper(s, p, i - 1, j - 1);
        }
        boolean notMatch = false;
        if (p.charAt(j) == '?' && i >= 0) {
            notMatch = helper(s, p, i - 1, j - 1);
        }
        if (p.charAt(j) == '*') {
            while (j >= 0 && p.charAt(j) == '*') {
                j--;
            }
            if (j >= 0) {
                for (int k = i; !notMatch && k >= 0; k--) {
                    notMatch = helper(s, p, k, j);
                }
            } else {
                notMatch = true;
            }
        }
        return match || notMatch;
    }

    public boolean isMatch(String s, String p) {
        return helper(s, p, s.length() - 1, p.length() - 1);
    }
}

----- Tabulation of my approach -----

class Solution {
    public boolean isMatch(String s, String p) {
        boolean[][] dp = new boolean[s.length() + 1][p.length() + 1];
        dp[0][0] = true;
        for (int i = 1; i <= s.length(); i++) {
            dp[i][0] = false;
        }
        for (int i = 0; i <= s.length(); i++) {
            for (int j = 1; j <= p.length(); j++) {
                boolean match = false;
                boolean notMatch = false;
                if (i >= 1 && s.charAt(i - 1) == p.charAt(j - 1)) {
                    match = dp[i - 1][j - 1];
                } else if (p.charAt(j - 1) == '?' && i >= 1) {
                    notMatch = dp[i - 1][j - 1];
                } else if (p.charAt(j - 1) == '*') {
                    int tempj = j;
                    while (tempj >= 1 && p.charAt(tempj - 1) == '*') {
                        tempj--;
                    }
                    if (tempj >= 1) {
                        for (int k = i; !notMatch && k >= 1; k--) {
                            notMatch = dp[k][tempj];
                        }
                    } else {
                        notMatch = true;
                    }
                }
                dp[i][j] = match || notMatch;
            }
        }
        return dp[s.length()][p.length()];
    }
}

----- Recursive, TC:- O(2^(m+n)) & SC:- O(max(m,n)) for stack space -----

class Solution {
    private boolean helper(String s, String p, int i, int j) {
        if (i < 0 && j < 0) {
            return true;
        }
        if (i >= 0 && j < 0) {
            return false;
        }
        if (j >= 0 && i < 0) {
            while (j >= 0) {
                if (p.charAt(j) != '*') {
                    return false;
                }
                j--;
            }
            return true;
        }
        boolean notStar = false;
        if (i >= 0 && (s.charAt(i) == p.charAt(j) || p.charAt(j) == '?')) {
            notStar = helper(s, p, i - 1, j - 1);
        }
        boolean star = false;
        if (p.charAt(j) == '*') {
            star = helper(s, p, i - 1, j) || helper(s, p, i, j - 1);
        }
        return star || notStar;
    }

    public boolean isMatch(String s, String p) {
        return helper(s, p, s.length() - 1, p.length() - 1);
    }
}

----- Recursive using dp, TC:- O(m*n) & SC:- O(max(m,n)) + O(m*n) for stack space and dp array -----

class Solution {
    private int helper(String s, String p, int i, int j, int[][] dp) {
        if (i < 0 && j < 0) {
            return 1;
        }
        if (i >= 0 && j < 0) {
            return 0;
        }
        if (j >= 0 && i < 0) {
            while (j >= 0) {
                if (p.charAt(j) != '*') {
                    return 0;
                }
                j--;
            }
            return 1;
        }
        if (dp[i][j] != -1) {
            return dp[i][j];
        }
        if (i >= 0 && (s.charAt(i) == p.charAt(j) || p.charAt(j) == '?')) {
            return dp[i][j] = helper(s, p, i - 1, j - 1, dp);
        }
        if (p.charAt(j) == '*') {
            if (helper(s, p, i - 1, j, dp) == 1 || helper(s, p, i, j - 1, dp) == 1) {
                return dp[i][j] = 1;
            }
        }
        return dp[i][j] = 0;
    }

    public boolean isMatch(String s, String p) {
        int[][] dp = new int[s.length()][p.length()];
        for (int[] a : dp) {
            Arrays.fill(a, -1);
        }
        int ans = helper(s, p, s.length() - 1, p.length() - 1, dp);
        return (ans == 1) ? true : false;
    }
}

----- Tabulation, TC:- O(m*n) & SC:- O(m*n) for dp array -----

class Solution {
    private boolean checkAllStar(String p, int j){
        while(j >= 1){
            if(p.charAt(j - 1) != '*'){
                return false;
            }
            j--;
        }
        return true;
    }
    public boolean isMatch(String s, String p) {
        boolean[][] dp = new boolean[s.length() + 1][p.length() + 1];
        dp[0][0] = true;
        for(int i = 1; i <= p.length(); i++){
            dp[0][i] = checkAllStar(p, i);
        }
        for(int i = 1; i <= s.length(); i++){
            for(int j = 1; j <= p.length(); j++){
                if (s.charAt(i-1) == p.charAt(j-1) || p.charAt(j-1) == '?') {
                    dp[i][j] = dp[i - 1][j - 1];
                }
                else if (p.charAt(j-1) == '*') {
                    dp[i][j] = dp[i-1][j] || dp[i][j-1];
                }
                else{
                    dp[i][j] = false;
                }
            }
        }
        return dp[s.length()][p.length()];
    }
}

----- Space optimization, TC:- O(m*n) & SC:- O(n) -----

class Solution {
    private boolean checkAllStar(String p, int j) {
        while (j >= 1) {
            if (p.charAt(j - 1) != '*') {
                return false;
            }
            j--;
        }
        return true;
    }

    public boolean isMatch(String s, String p) {
        boolean[] prev = new boolean[p.length() + 1];
        prev[0] = true;
        for (int i = 1; i <= p.length(); i++) {
            prev[i] = checkAllStar(p, i);
        }
        for (int i = 1; i <= s.length(); i++) {
            boolean[] curr = new boolean[p.length() + 1];
            for (int j = 1; j <= p.length(); j++) {
                if (s.charAt(i - 1) == p.charAt(j - 1) || p.charAt(j - 1) == '?') {
                    curr[j] = prev[j - 1];
                } else if (p.charAt(j - 1) == '*') {
                    curr[j] = prev[j] || curr[j - 1];
                } else {
                    curr[j] = false;
                }
            }
            prev = curr;
        }
        return prev[p.length()];
    }
}

Reference:- https://takeuforward.org/data-structure/detect-a-cycle-in-a-linked-list/
----- TC:- O(n), SC:- O(n) where n = length of list -----

public class Solution {
    public boolean hasCycle(ListNode head) {
        Set<ListNode> set = new HashSet<>();
        while (head != null) {
            if (set.contains(head)) {
                return true;
            }
            set.add(head);
            head = head.next;
        }
        return false;
    }
}

----- TC:- O(n), SC:- O(1) where n = length of list -----

public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode fast = head, slow = fast;
        do {
            if (fast == null || fast.next == null) {
                return false;
            }
            fast = fast.next.next;
            slow = slow.next;
        } while (fast != slow);
        return true;
    }
}

----- Same approach as above, TC:- O(n), SC:- O(1) where n = length of list -----

public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode slow = head, fast = head;
        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
            if (fast == slow) {
                return true;
            }
        }
        return false;
    }
}
Refernece:- https://takeuforward.org/data-structure/length-of-longest-substring-without-any-repeating-character/
----- My solution, TC:- O(2n) as in worst case i and j both need to traverse the whole array, SC:- O(n) -----

class Solution {
    public int lengthOfLongestSubstring(String s) {
        Set<Character> set = new HashSet<>();
        int max = 0;
        for (int i = 0, j = 1; j <= s.length(); ) {
            char indj = s.charAt(j - 1);
            if (!set.contains(indj)) {
                max = Math.max(max, (j - i));
                set.add(indj);
                j++;
            } else {
                set.remove(s.charAt(i));
                i++;
            }
        }
        return max;
    }
}

----- TC:- O(n), SC:- O(n) -----

class Solution {
    public int lengthOfLongestSubstring(String s) {
        int max = 0, left = 0, right = 0;
        Map<Character, Integer> map = new HashMap<>();
        while (right < s.length()) {
            char curr = s.charAt(right);
            if (map.containsKey(curr)) {
                left = Math.max(map.get(curr) + 1, left); //Using Math.max for testcase "abba"
				//For right = index 2, left will be 2
				//For right = index 3, left will be 0, to avoid this scenario, we used Math.max
            }
            map.put(curr, right);
            max = Math.max(max, right - left + 1);
            right++;
        }
        return max;
    }
}
------- TC:- O(n), SC:- O(n) -------
------- Reference:- https://www.youtube.com/watch?v=5Y2EiZST97Y -------

class Solution {
    public Node copyRandomList(Node head) {
        Map<Node, Node> map = new HashMap<>(); //Map<Integer, Node> will not work, as node.val can be repeated
        Node temp = head;
        while (temp != null) {
            map.put(temp, new Node(temp.val));
            temp = temp.next;
        }
        temp = head;
        while (temp != null) {
            map.get(temp).next = map.get(temp.next); //map.get(null) will return null
            map.get(temp).random = map.get(temp.random);
            temp = temp.next;
        }
        return map.get(head);
    }
}


------- TC:- O(3n) ~ O(n), SC:- O(1) -------
------- Reference:- https://www.youtube.com/watch?v=uBjpRedaNKQ  -------

class Solution {
    public Node copyRandomList(Node head) {
        Node temp = head;
        while (temp != null) {
            Node newNode = new Node(temp.val);
            Node nxt = temp.next;
            temp.next = newNode;
            temp.next.next = nxt;
            temp = nxt;
        }
        temp = head;
        while (temp != null) {
            temp.next.random = (temp.random == null) ? null : temp.random.next;
            temp = temp.next.next;
        }
        temp = head;
        head = (head == null) ? null : head.next;
        while (temp != null) {
            Node tempCpy = temp.next;
            temp.next = tempCpy.next;
            temp = temp.next;
            tempCpy.next = (temp == null) ? null : temp.next;
        }
        return head;
    }
}
------ TC:- O(n), SC:- O(n) for using queue, where n = number of nodes ------

class Solution {
    public int maxDepth(TreeNode root) {
        if (root == null) {
            return 0;
        }
        Deque<TreeNode> q = new ArrayDeque<>();
        int height = 0;
        q.offer(root);
        while (!q.isEmpty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                TreeNode temp = q.poll();
                if (temp.left != null) {
                    q.offer(temp.left);
                }
                if (temp.right != null) {
                    q.offer(temp.right);
                }
            }
            height++;
        }
        return height;
    }
}

------ TC:- O(n), SC:- O(h) where n = number of nodes, h = height of the tree ------

class Solution {
    private int getHeight(TreeNode root) {
        if (root == null) {
            return 0;
        }
        if (root.left == null && root.right == null) {
            return 1;
        }
        return Math.max(getHeight(root.left), getHeight(root.right)) + 1;
    }

    public int maxDepth(TreeNode root) {
        return getHeight(root);
    }
}
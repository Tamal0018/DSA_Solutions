----- Recursive, TC:- O(2^(2*2*n)) & SC:- O(n) for stack space -----

class Solution {
    private int helper(int idx, int[] prices, boolean holding, int count) {
        if (idx == prices.length || count >= 2) {
            return 0;
        }
        int profit = 0;
        if (holding) {
            int skip = helper(idx + 1, prices, holding, count);
            int sell = prices[idx] + helper(idx + 1, prices, false, count + 1);
            profit = Math.max(skip, sell);
        } else {
            int skip = helper(idx + 1, prices, holding, count);
            int buy = -prices[idx] + helper(idx + 1, prices, true, count);
            profit = Math.max(skip, buy);
        }
        return profit;
    }

    public int maxProfit(int[] prices) {
        return helper(0, prices, false, 0);
    }
}

----- Recursive using dp, TC:- O(2*3*n) ~ O(n) & SC:- O(n) + O(2*3*n) for stack space and dp array -----

class Solution {
    private int helper(int idx, int[] prices, boolean holding, int count, int[][][] dp) {
        if (idx == prices.length || count >= 2) {
            return 0;
        }
        if (dp[idx][holding ? 1 : 0][count] != -1) {
            return dp[idx][holding ? 1 : 0][count];
        }
        int profit = 0;
        if (holding) {
            int skip = helper(idx + 1, prices, holding, count, dp);
            int sell = prices[idx] + helper(idx + 1, prices, false, count + 1, dp);
            profit = Math.max(skip, sell);
        } else {
            int skip = helper(idx + 1, prices, holding, count, dp);
            int buy = -prices[idx] + helper(idx + 1, prices, true, count, dp);
            profit = Math.max(skip, buy);
        }
        return dp[idx][holding ? 1 : 0][count] = profit;
    }

    public int maxProfit(int[] prices) {
        int n = prices.length;
        int[][][] dp = new int[n][2][2];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 2; j++) {
                Arrays.fill(dp[i][j], -1);
            }
        }
        return helper(0, prices, false, 0, dp);
    }
}

----- Tabulation, TC:- O(2*3*n) ~ O(n) & SC:- O(2*3*n) for dp array -----

class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int[][][] dp = new int[n + 1][2][2 + 1];
        for (int i = n - 1; i >= 0; i--) {
            for (int j = 0; j < 2; j++) {
                for (int k = 0; k < 2; k++) {
                    int profit = 0;
                    if (j == 1) {
                        int skip = dp[i + 1][j][k];
                        int sell = prices[i] + dp[i + 1][0][k + 1];
                        profit = Math.max(skip, sell);
                    } else {
                        int skip = dp[i + 1][j][k];
                        int buy = -prices[i] + dp[i + 1][1][k];
                        profit = Math.max(skip, buy);
                    }
                    dp[i][j][k] = profit;
                }
            }
        }

        return dp[0][0][0];
    }
}

----- Space optimization, TC:- O(2*3*n) ~ O(n) & SC:- O(1) -----

class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int[][] ahead = new int[2][2 + 1];
        for (int i = n - 1; i >= 0; i--) {
            int[][] curr = new int[2][2 + 1];
            for (int j = 0; j < 2; j++) {
                for (int k = 0; k < 2; k++) {
                    int profit = 0;
                    if (j == 1) {
                        int skip = ahead[j][k];
                        int sell = prices[i] + ahead[0][k + 1];
                        profit = Math.max(skip, sell);
                    } else {
                        int skip = ahead[j][k];
                        int buy = -prices[i] + ahead[1][k];
                        profit = Math.max(skip, buy);
                    }
                    curr[j][k] = profit;
                }
            }
            ahead = curr;
        }

        return ahead[0][0];
    }
}
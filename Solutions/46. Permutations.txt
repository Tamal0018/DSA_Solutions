----- Brute force (Striver), TC:- O(n! * n), SC:- O(3n) for stack space, auxilary set and list size -----

class Solution {
    public void helper(int[] nums, int idx, Set<Integer> set, List<Integer> list, List<List<Integer>> ans) {
        if (list.size() == nums.length) {
            ans.add(new ArrayList(list));
        }
        for (int n : nums) {
            if (!set.contains(n)) {
                list.add(n);
                set.add(n);
                helper(nums, idx + 1, set, list, ans);
                list.remove(list.size() - 1);
                set.remove(n);
            }
        }
    }

    public List<List<Integer>> permute(int[] nums) {
        Set<Integer> set = new HashSet<>();
        List<Integer> list = new ArrayList<>();
        List<List<Integer>> ans = new ArrayList<>();
        helper(nums, 0, set, list, ans);
        return ans;
    }
}

----- My perfect solution:- TC:- O(n! * n) where n! for number of permutation and n for storing it into list, SC:- O(n) for stack space and O(n!) for storing values (Another (not optimal) solution:- https://takeuforward.org/data-structure/print-all-permutations-of-a-string-array/) -----

class Solution {
    public void swap(int a, int b, int[] nums) {
        int temp = nums[a];
        temp = nums[a];
        nums[a] = nums[b];
        nums[b] = temp;
    }

    public void helper(List<List<Integer>> ans, int[] nums, int idx) {
        if (idx >= nums.length) {
            List<Integer> permutation = new ArrayList<>();
            for (int num : nums) {
                permutation.add(num);
            }
            ans.add(permutation);
        }
        for (int i = idx; i < nums.length; i++) {
            swap(idx, i, nums);
            helper(ans, nums, idx + 1);
            swap(idx, i, nums);
        }
    }

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        helper(ans, nums, 0);
        return ans;
    }
}


----- Explained -----
 [1,2,3,4]:- Swap every position value with itself.
 [1,2,4,3]:- for(int i = 2; i < nums.length; i++) swaps value 3 with 4. After this idx becomes nums.length and array becomes [1,2,3,4].
 [1,3,2,4]:- Swaps 2 with 3 and swap 4 with itself.
 [1,3,4,2]:- Swaps 4 with 2 and array becomes [1,2,3,4].
 [1,4,3,2]:- Swaps 2 with 4.
 [1,4,2,3]:- Swaps 2 with 3.
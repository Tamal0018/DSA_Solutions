---------- TC:- O(m x n), SC:- O(m x n) for recursive stack ----------
---------- Reference:- https://www.youtube.com/watch?v=9z2BunfoZ5Y ----------

class Solution {
    private void marker(char[][] board, int i, int j) {
        if (i < 0 || j < 0 || i > board.length - 1 || j > board[i].length - 1 || board[i][j] != 'O') {
            return;
        }
        board[i][j] = 'T';
        marker(board, i + 1, j);
        marker(board, i, j + 1);
        marker(board, i, j - 1);
        marker(board, i - 1, j);
    }

    public void solve(char[][] board) {
        if (board.length <= 2 || board[0].length <= 2) {
            return;
        }
        for (int i = 0; i < board.length; i += (board.length - 1)) {
            for (int j = 0; j < board[i].length; j++) {
                if (board[i][j] == 'O') {
                    marker(board, i, j);
                }
            }
        }
        for (int i = 1; i < board.length - 1; i++) {
            for (int j = 0; j < board[i].length; j += (board[i].length - 1)) {
                if (board[i][j] == 'O') {
                    marker(board, i, j);
                }
            }
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                if (board[i][j] == 'O') {
                    board[i][j] = 'X';
                } else if (board[i][j] == 'T') {
                    board[i][j] = 'O';
                }
            }
        }
    }
}

---------- My solution, TC:- O(m x n), SC:- O(m x n) for recursive stack, but the solution does not work for few cases as it can not restore intermediate 'X' to 'O' after a false indication ----------

class Solution {
    private boolean check(char[][] board, int i, int j) {
        if ((i == 0 || j == 0 || i == board.length - 1 || j == board[i].length - 1) && (board[i][j] == 'O')) {
            System.out.println("edge case " + i + " " + j);
            return false;
        } else if (board[i][j] == 'O') {
            System.out.println("o to x " + i + " " + j);
            board[i][j] = 'X';
            if (check(board, i + 1, j) && check(board, i - 1, j) && check(board, i, j + 1) && check(board, i, j - 1)) {
                System.out.println("truing " + i + " " + j);
                return true;
            } else {
                System.out.println("restore x to o " + i + " " + j);
                board[i][j] = 'O';
                return false;
            }
        }
        return true;
    }

    public void solve(char[][] board) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                if (board[i][j] == 'O') {
                    check(board, i, j);
                }
            }
        }
    }
}
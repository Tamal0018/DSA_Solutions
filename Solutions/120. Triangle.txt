----- Recursive, TC:- O(2^(n*n)) & SC:- O(n) for stack space -----

class Solution {
    private int helper(int row, int col, List<List<Integer>> triangle) {
        if (row == triangle.size() - 1) {
            return triangle.get(row).get(col);
        }
        return Math.min(helper(row + 1, col, triangle), helper(row + 1, col + 1, triangle)) + triangle.get(row).get(col);
    }

    public int minimumTotal(List<List<Integer>> triangle) {
        return helper(0, 0, triangle);
    }
}

----- Recursive using dp, TC:- O(n*n) & SC:- O((n) + O(n*n) for stack space and dp array -----

class Solution {
    private int helper(int row, int col, List<List<Integer>> triangle, int[][] dp) {
        if (row == triangle.size() - 1) {
            return dp[row][col] = triangle.get(row).get(col);
        }
        if (dp[row][col] != Integer.MAX_VALUE) {
            return dp[row][col];
        }
        return dp[row][col] = Math.min(helper(row + 1, col, triangle, dp), helper(row + 1, col + 1, triangle, dp)) + triangle.get(row).get(col);
    }

    public int minimumTotal(List<List<Integer>> triangle) {
        int[][] dp = new int[triangle.size()][triangle.get(triangle.size() - 1).size()];
        for (int i = 0; i < dp.length; i++) {
            for (int j = 0; j < dp[i].length; j++) {
                dp[i][j] = Integer.MAX_VALUE;
            }
        }
        return helper(0, 0, triangle, dp);
    }
}

----- Tabulation, TC:- O(n*n) & SC:- O(n*n) for dp array -----

class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int[][] dp = new int[triangle.size()][triangle.get(triangle.size() - 1).size()];
        for (int i = triangle.size() - 1; i >= 0; i--) {
            for (int j = 0; j <= i; j++) {
                if (i == triangle.size() - 1) {
                    dp[i][j] = triangle.get(i).get(j);
                } else {
                    dp[i][j] = Math.min(dp[i + 1][j], dp[i + 1][j + 1]) + triangle.get(i).get(j);
                }
            }
        }
        return dp[0][0];
    }
}

----- Space optimization, TC:- O(n*n) & SC:- O(n) where n = triangle.get(triangle.size() - 1).size() -----

class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int[] prev = new int[1];
        for (int i = triangle.size() - 1; i >= 0; i--) {
            int[] curr = new int[i + 1];
            for (int j = 0; j <= i; j++) {
                if (i == triangle.size() - 1) {
                    curr[j] = triangle.get(i).get(j);
                } else {
                    curr[j] = Math.min(prev[j], prev[j + 1]) + triangle.get(i).get(j);
                }
            }
            prev = curr;
        }
        return prev[0];
    }
}